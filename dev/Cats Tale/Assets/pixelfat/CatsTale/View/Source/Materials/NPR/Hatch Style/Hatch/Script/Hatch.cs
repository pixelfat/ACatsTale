using UnityEngine;public class Hatch : MonoBehaviour{	[Header("Parameters")]	public bool m_UseComplicated = false;	[Range(0.1f, 16f)] public float m_HatchScale = 1f;	public Color m_HatchColor = Color.black;	[Range(1f, 10f)] public float m_HatchDensity = 4f;	public Color m_OutlineColor = Color.black;	[Range(0.1f, 10f)] public float m_OutlineWidth = 6f;	public bool m_RimInverse = false;	[Header("Internal")]	public Renderer m_Rd;	public Material[] m_BackupMaterials;	public Shader[] m_Shaders = new Shader[3];	public bool m_DisableHatch = false;		public void Initialize ()	{		m_Shaders[0] = Shader.Find ("NPR Hatch Effect/Hatch Simple");		m_Shaders[1] = Shader.Find ("NPR Hatch Effect/Hatch Complicated");		m_Shaders[2] = Shader.Find ("Standard");		m_Rd = GetComponent<Renderer> ();		// cache all original materials		Material[] mats = m_Rd.materials;		int len = mats.Length;		m_BackupMaterials = new Material[len];		for (int i = 0; i < len; i++)		{			m_BackupMaterials[i] = mats[i];		}	}	public void UpdateSelfParameters ()	{		Material[] mats = m_Rd.materials;		for (int i = 0; i < mats.Length; i++)		{			if (m_DisableHatch)			{				mats[i].shader = m_Shaders[2];				continue;			}						if (m_UseComplicated)				mats[i].shader = m_Shaders[1];			else				mats[i].shader = m_Shaders[0];			if (m_RimInverse)				mats[i].EnableKeyword ("NHE_INVERSE_RIM");			else				mats[i].DisableKeyword ("NHE_INVERSE_RIM");			mats[i].SetFloat ("_HatchScale", m_HatchScale);			mats[i].SetColor ("_HatchColor", m_HatchColor);			mats[i].SetFloat ("_HatchDensity", m_HatchDensity);			mats[i].SetColor ("_OutlineColor", m_OutlineColor);			mats[i].SetFloat ("_OutlineWidth", m_OutlineWidth);			mats[i].SetTexture ("_MainTex", m_BackupMaterials[i].GetTexture ("_MainTex"));			mats[i].SetTextureOffset ("_MainTex", m_BackupMaterials[i].GetTextureOffset ("_MainTex"));			mats[i].SetTextureScale ("_MainTex", m_BackupMaterials[i].GetTextureScale ("_MainTex"));		}	}}